//
//  NoteSyncWorkerTests.swift
//  LandmarkRemark
//
//  Created by Mira Kim on 17/05/19.
//  Copyright (c) 2019 mira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import LandmarkRemark
import XCTest

class NoteSyncWorkerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: NoteFetchWorker!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupMapWorker()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMapWorker()
  {
    sut = NoteFetchWorker()
  }
  
  // MARK: Test doubles
  
  // MARK: Tests
  
    func testNoteConvertToDictionary()
    {
        // Given
        let datetimeNow = Date().timeIntervalSince1970
        let dto = Note.Dto(text: "basic text", username: "bob", latitude: 36.1231231, longitude: -124.23423455, datetime: datetimeNow)

        // When
        let dict = try? dto.asDictionary()

        // Then
        XCTAssertNotNil(dict)
        guard let dictionary = dict else {
            return
        }
        
        XCTAssertEqual(dictionary.keys.count, 5)
        
        guard let text = dictionary["text"] as? String,
            let username = dictionary["username"] as? String,
            let latitude = dictionary["latitude"] as? Double,
            let longitude = dictionary["longitude"] as? Double,
            let datetime = dictionary["datetime"] as? Double
        else {
                XCTFail("Expected values are not found in the dictionary")
                return
        }
        XCTAssertEqual(text, "basic text")
        XCTAssertEqual(username, "bob")
        XCTAssertEqual(latitude, 36.1231231)
        XCTAssertEqual(longitude, -124.23423455)
        XCTAssertEqual(datetime, datetimeNow)
    }
    
    func testDictionaryConvertToNote() {
        let datetimeNow = Date().timeIntervalSince1970
        // Given
        let dictionary: [String: Any] = ["text": "basic text", "username": "bob", "latitude": 36.1231231, "longitude": -124.23423455, "datetime": datetimeNow]
        
        // When
        let resultNote = try? sut.exposedConvertToNote(from: dictionary)
        
        // Then
        XCTAssertNotNil(resultNote)
        
        guard let note = resultNote else {
            return
        }
        
        let expectedNote = Note.Dto(text: "basic text", username: "bob", latitude: 36.1231231, longitude: -124.23423455, datetime: datetimeNow)
        XCTAssertEqual(note, expectedNote)
    }
}

extension NoteFetchWorker {
    public func exposedConvertToNote(from dictionary: [String: Any]) throws -> Note.Dto {
        return try convertToNote(from: dictionary)
    }
}
