//
//  MapViewController.swift
//  LandmarkRemark
//
//  Created by Mira Kim on 17/05/19.
//  Copyright (c) 2019 mira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit
import CoreLocation

protocol MapDisplayLogic: class
{
    func displayAlert(_ alert: UIAlertController)
    func displayRegionOnMap(_ region: MKCoordinateRegion)
    func displayPins(_ annotations:[NoteViewModel])
    func goToAddNote()
}

/**
 * @brief Map View Controller displays the map with user's current location.
 *      It displays the pins for each note on the map.
 */
class MapViewController: UIViewController, MapDisplayLogic
{
  var interactor: MapBusinessLogic?
  var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?

  // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    /**
        This sets up the components for CleanSwift and injects required dependencies
        between these components.
     */
    private func setup()
    {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        guard let scene = segue.identifier, scene == "AddNote", let router = router else {
            return
        }
        router.routeToAddNote(segue: segue)
    }

    // MARK: - View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        interactor?.setupLocationManager()
        mapView.showsUserLocation = true
        
        // Custom view for map annotation is only supported in iOS 11.
        // No custom view is set for iOS 10.
        if #available(iOS 11.0, *) {
            mapView.register(NoteMarkerView.self, forAnnotationViewWithReuseIdentifier: MKMapViewDefaultAnnotationViewReuseIdentifier)
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        // start getting location updates when view appears
        interactor?.startLocationUpdates()
        
        // show notes pin
        interactor?.getNotes()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        // stop location updates when view is about to disappear
        interactor?.stopLocationUpdates()
    }

    // MARK: - Outlet and Action
  
    @IBOutlet weak var mapView: MKMapView!
    @IBAction func addNoteButton(_ sender: Any) {
        interactor?.addNote()
    }
    
    /// Triggered when gps icon is tapped and shows the current location on the map
    @IBAction func showCurrentLocation(_ sender: Any) {
        // clear the note to show
        interactor?.clearFocusOnNote()
        
        // ask interactor to start location updates
        // Once location is
        // move the map to show the current location
        interactor?.startLocationUpdates()
    }
    
    /// Unwind segue from search
    @IBAction func unwindToMap(segue:UIStoryboardSegue) {
        // go to note
    }
    
    // MARK: - Display Logic
    
    /// Displays the alert as configured from the presenter
    func displayAlert(_ alert: UIAlertController) {
        present(alert, animated: true, completion: nil)
    }
    
    /// Displays the selected region on the map which adjusts the zoom of the map
    /// and pan to location
    func displayRegionOnMap(_ region: MKCoordinateRegion) {
        mapView.setRegion(region, animated: true)
    }
    
    /// Displays the annotations/pins on the map for each note
    func displayPins(_ annotations: [NoteViewModel]) {
        mapView.addAnnotations(annotations)
    }
    
    /// Segue to add note screen
    func goToAddNote() {
        performSegue(withIdentifier: "AddNote", sender: self)
    }
    
}

