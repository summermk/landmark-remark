//
//  SearchInteractor.swift
//  LandmarkRemark
//
//  Created by Mira Kim on 21/05/19.
//  Copyright (c) 2019 mira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchBusinessLogic
{
    func getNotes()
    
    func selectedNote(_ model: NoteCellModel)
}

protocol SearchDataStore
{
    var selectedNote: NoteCellModel? { get set }
}

class SearchInteractor: SearchBusinessLogic, SearchDataStore
{
    var presenter: SearchPresentationLogic?
    var fetchWorker: NoteFetchWorker?
    var selectedNote: NoteCellModel?

    /// Get all notes
    func getNotes() {
        // Get all the notes first and cache it.
        // This list will be filtered as user types in the search results.
        fetchWorker = NoteFetchWorker()
        
        fetchWorker?.readNotes(completion: { (notes) in
            guard let notes = notes else {
                // TODO: handle no notes
                // just don't show anything?
                return
            }
            
            // convert the notes dto to view model
            let viewModels = NoteConverter.convertDtosForTable(array: notes)
            
            // ask presenter
            self.presenter?.presentNotes(viewModels)
        })
    }
    
    func selectedNote(_ model: NoteCellModel) {
        selectedNote = model
    }
    
    
    // TODO
    // For better performance search queries should be run on Firestore.
    
}
