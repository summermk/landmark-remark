//
//  AddNoteViewController.swift
//  LandmarkRemark
//
//  Created by Mira Kim on 18/05/19.
//  Copyright (c) 2019 mira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddNoteDisplayLogic: class
{
    func displayAlert(_ alert: UIAlertController)
    func closeView()
}

/**
 *  Add a new note for the current location on the map.
 *
 *  This will save a new note with username and current timestamp.
 */
class AddNoteViewController: UIViewController, AddNoteDisplayLogic
{
    var interactor: AddNoteBusinessLogic?
    var router: (NSObjectProtocol & AddNoteRoutingLogic & AddNoteDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
  // MARK: Setup
  
    /// Setup for cleanswift components
    private func setup()
    {
        let viewController = self
        let interactor = AddNoteInteractor()
        let presenter = AddNotePresenter()
        let router = AddNoteRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
          let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
          if let router = router, router.responds(to: selector) {
            router.perform(selector, with: segue)
          }
        }
    }
  
    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        // make sure to clear the text field
        // and set it to first responder to show keyboard
        resetViews()
        textView.becomeFirstResponder()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        // this hides the keyboard
        textView.resignFirstResponder()
    }
  
    // MARK: Outlets and Actions
  
    @IBOutlet weak var textFieldHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var textView: UITextView!
    @IBOutlet weak var characterCountLabel: UILabel!
    
    // arbitrary maximum length set for text view
    // maximum length needs to be 1 more than the allowed character.
    let maxMessageLength = 141
    
    var placeholderLabel: UILabel!
    var textViewFontSize: CGFloat {
        return textView.font!.pointSize
    }
    
    private func resetViews() {
        textView.text = ""              // clear the text view
        textView.delegate = self        // set the delegate to handle text changes
        characterCountLabel.text = formatCharCountLabel(0)  // reset the character count to 0
        initializePlaceholderLabel()    // set up the placeholder
    }
    
    /**
        This sets up the placeholder label for text view.
     
        There is no built-in placeholder so it's configured manually here.
        Placeholder will be hidden if there are text entered in the text view.
     */
    private func initializePlaceholderLabel() {
        placeholderLabel = UILabel()
        placeholderLabel.text = "Enter your notes here"
        placeholderLabel.font = UIFont.systemFont(ofSize: textViewFontSize)
        placeholderLabel.sizeToFit()
        textView.addSubview(placeholderLabel)
        placeholderLabel.frame.origin = CGPoint(x: 5, y: (textViewFontSize / 2))
        placeholderLabel.textColor = UIColor.lightGray
        placeholderLabel.isHidden = !textView.text.isEmpty
    }
    
    /**
        Triggered when save button is pressed
     */
    @IBAction func saveAction(_ sender: Any) {
        interactor?.saveNote(textView.text)
    }
    
    /**
        Triggered when close button is pressed
     */
    @IBAction func closeAction(_ sender: Any) {
        closeView()
    }
    
  
    // MARK: AddNoteDisplayLogic
    
    /// Close this view
    func closeView() {
        dismiss(animated: true, completion: nil)
    }
    
    /// Displays the alert
    func displayAlert(_ alert: UIAlertController) {
        present(alert, animated: true, completion: nil)
    }
}


extension AddNoteViewController: UITextViewDelegate {
    
    func textViewDidChange(_ textView: UITextView) {
        // show or hide placeholder label
        placeholderLabel.isHidden = !textView.text.isEmpty
        
        // configure the character count label as user types
        var messageLength = 0
        if let text = textView.text {
            messageLength = text.count
        }
        characterCountLabel.text = formatCharCountLabel(messageLength)
    }
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        // This ensures that message doesn't exceed the maximum character count
        let newText = (textView.text as NSString).replacingCharacters(in: range, with: text)
        let numberOfChars = newText.count
        return numberOfChars < maxMessageLength
    }
    
    /// Formats the character count label
    func formatCharCountLabel(_ count: Int) -> String {
        // e.g. (0/140) or (12/140)
        return "(\(count)/\(maxMessageLength-1))"
    }
}
